{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Express yourself with code."},{"location":"#what","title":"What","text":"<p>The Invent framework helps anyone make and share apps.</p> <p>Deliberately constrained to use a small number of core concepts, Invent  is easy to teach and learn. Combine the core concepts to construct apps that reflect your unique vision of our digital world. Built in tools help you playfully imagine, explore and refine your applications. Share your creations with anyone on the planet at the click of a button.</p> <p>That's it!</p>"},{"location":"#why","title":"Why","text":"<p>Computers are everywhere. They touch all aspects of our lives, from our social interactions to managing the everyday infrastructure of society.</p> <p>The Invent framework empowers anyone to creatively participate in the world of computers.</p> <p>We believe everyone should be able to directly control the technology in their lives, rather than be directed by complicated code controlled by others. This is digital emancipation: you're no longer just a user, but a co-creator and participant in computing culture.</p> <p>What will you invent?</p>"},{"location":"#how","title":"How","text":"<p>The Invent framework uses two of the most vibrant technical ecosystems on the planet.</p> <ul> <li>The web - the world's most   ubiquitous computing platform, mature and familiar to billions of people.</li> <li>Python - one of the world's most popular and easy to   learn programming languages.</li> </ul> <p>Invent sits on top of PyScript, a platform for Python in web browsers. </p> <p>The built in tools guide beginner programmers with their first steps, but stay out of the way of experienced folk. Our focus is on ease of expression, flexibility in the face of change, and engaging in a journey to experience.</p>"},{"location":"#who","title":"Who","text":"<p>Invent is for anyone who wants to express themselves with code.</p> <p>We are an open source project ~ the Invent framework is free to use.</p> <p>We focus on our community ~ we invite you to contribute your unique perspective, talents and skills to the future of our project. </p> <p>We welcome everyone, irrespective of background ~ collaborate within a cosmopolitan community of unique individuals, learn from each other and mutually enlarge our digital world.</p> <p>We expect folks participating in the development of the Invent framework to engage respectfully, compassionately and in good faith.</p>"},{"location":"being_together/","title":"On Being Together","text":"<p>We welcome everyone, irrespective of their backgrounds. If you're thinking, \"but they don't mean me\", then we especially mean YOU.</p> <ul> <li>If you're from a background which isn't well-represented in most coding   groups, get involved - we want to help you make a difference.</li> <li>If you're from a background which is well-represented in most coding   groups, get involved - we want your help making a difference.</li> <li>If you're worried about not being technical enough, get involved - your   fresh perspective will be invaluable.</li> <li>If you need help with anything, get involved - we welcome questions asked   in good faith, and will move mountains to help.</li> <li>If you're unsure where to start, get involved - we have many ways to   contribute.</li> </ul> <p>It means we are a diverse and inclusive community, where freedom of expression is respected, encouraged and celebrated.</p> <p>Therefore, you will meet people working with the Invent framework who are different to yourself.</p> <p>This is an expression of what you can expect from us and what we hope from you as we find ourselves \"being together\" with Invent:</p>  When being together, especially if things go wrong, we acknowledge and work through differences. In so doing, we transform and enlarge each other. To nurture our mutual growth, this is a place of learning, understanding, and sharing; this is a place to affirm tolerance and compassion; this is a place for collaborative creativity. All the aspects of yourself you choose to bring to this place are welcome here. Reciprocate! Welcome, embrace and learn from others (even in the face of apparent hostility or misunderstanding). Thoughtful, careful and courteous contributions are a gift, and never knowingly diminish, dehumanize, harm or harass others. To act against this spirit invites ostracism, a loss that diminishes us all. Thank you.  <p>We (the core maintainers of the Invent project) promise always to seriously and constructively engage with all parties should problems arise.</p> <p>Reach out to us, in confidence.</p> <p>Our focus is context, care and compassion, in a spirit of understanding, hope and tolerance, to foster a safe, enjoyable and enriching space for collaboration on the development of the Invent framework.</p> <p>However, we reserve the right to exclude participants, solely at our discretion, for bad faith actions and activities that intentionally diminish, dehumanize, harm or harass people.</p> <p>If required, we will involve any necessary official authorities to deal with potentially illegal activity. In all other cases, we take a three step approach when problems arise:</p> <ol> <li>We will respectfully engage with everyone involved and listen very    carefully. If required, we will address problematic behaviour and ask people    to modify their actions. We expect everyone involved to act with care,    compassion and in good faith.</li> <li>If problematic behaviour continues, we will contact those involved and    explain that any further activity of this kind will result in them being    temporarily blocked or permanently banned from participating in the    development of the Invent framework.</li> <li>Despite our warning, if those persons show no sign of changing their    problematic behaviour, we will be true to our word and temporarily block or    permanently ban them. Henceforth, no further Invent related interactions    about the matter will take place with those persons.</li> </ol> <p>This is a work in progress and we welcome constructive feedback given in good faith.</p>"},{"location":"license/","title":"Apache License","text":"<p>Version 2.0, January 2004 &lt;http://www.apache.org/licenses/&gt;</p>"},{"location":"license/#terms-and-conditions-for-use-reproduction-and-distribution","title":"Terms and Conditions for use, reproduction, and distribution","text":""},{"location":"license/#1-definitions","title":"1. Definitions","text":"<p>\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.</p> <p>\u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p> <p>\u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License.</p> <p>\u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p> <p>\u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).</p> <p>\u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p> <p>\u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d</p> <p>\u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p>"},{"location":"license/#2-grant-of-copyright-license","title":"2. Grant of Copyright License","text":"<p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.</p>"},{"location":"license/#3-grant-of-patent-license","title":"3. Grant of Patent License","text":"<p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p>"},{"location":"license/#4-redistribution","title":"4. Redistribution","text":"<p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p> <ul> <li>(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and</li> <li>(b) You must cause any modified files to carry prominent notices stating that You changed the files; and</li> <li>(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</li> <li>(d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</li> </ul> <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>"},{"location":"license/#5-submission-of-contributions","title":"5. Submission of Contributions","text":"<p>Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p>"},{"location":"license/#6-trademarks","title":"6. Trademarks","text":"<p>This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.</p>"},{"location":"license/#7-disclaimer-of-warranty","title":"7. Disclaimer of Warranty","text":"<p>Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.</p>"},{"location":"license/#8-limitation-of-liability","title":"8. Limitation of Liability","text":"<p>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p>"},{"location":"license/#9-accepting-warranty-or-additional-liability","title":"9. Accepting Warranty or Additional Liability","text":"<p>While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#appendix-how-to-apply-the-apache-license-to-your-work","title":"APPENDIX: How to apply the Apache License to your work","text":"<p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets <code>[]</code> replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives.</p> <pre><code>Copyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"core/","title":"Core concepts","text":"<p>A single page explainer of the core concepts, what they are, and how they relate.</p>"},{"location":"core/#functions","title":"Functions","text":"<p>Code containing custom behaviour.</p> <ul> <li>Just Python functions with a single message argument.</li> <li>Store and change the state of things via the datastore.</li> <li>Signal events and activity by publishing messages.</li> </ul>"},{"location":"core/#pubsub","title":"PubSub","text":"<p>Listen for / emit in-app messages.</p> <ul> <li>Messages have a meaningfully named channel, and arbitrary payload.</li> <li>Publish (pub) messages to channels, to indicate when something happens.</li> <li>Subscribe (sub) to messages on a certain channel with a function, to   handle when certain things happen.</li> </ul>"},{"location":"core/#media","title":"Media","text":"<p>Digital assets used within the app.</p> <ul> <li>Raw images, sounds, videos, text and data.</li> </ul>"},{"location":"core/#widgets","title":"Widgets","text":"<p>User interface elements or media handlers.</p> <ul> <li>Widgets are common UI elements like buttons, dropdowns, image viewers, video   players...</li> <li>Widget attributes may subscribe to messages so they auto-update.</li> <li>Containers define the widget's formation and layout.</li> <li>Based on BeeWare's Toga framework.</li> </ul>"},{"location":"core/#cards","title":"Cards","text":"<p>Show things to the user.</p> <ul> <li>Cards display / layout widgets.</li> <li>User interactions with widgets in cards emit messages - e.g. \"clicked\".</li> </ul>"},{"location":"core/#transitions","title":"Transitions","text":"<p>Move between cards.</p> <ul> <li>Transitions usually have a single source card and destination card.</li> <li>Some transitions define multiple source cards and a single destination card.</li> <li>Transitions may also have a user defined function associated with them.</li> </ul>"},{"location":"core/#datastore","title":"DataStore","text":"<p>Keeps state, stores data.</p> <ul> <li>A very simple key/value store.</li> <li>When the datastore is changed, it emits a message to say what has changed.</li> <li>May include search capabilities.</li> <li>May have a backend that syncs with remote storage.</li> </ul>"},{"location":"core/#tasks","title":"Tasks","text":"<p>Do things until an outcome / result is achieved (e.g. a network request).</p> <ul> <li>Blocking tasks display a \"waiting\" card, in which you can cancel the task.   When finished either transition to a success card or transition to an error   card.</li> <li>Background tasks, when the outcome is known, either emit a message or update   the datastore.</li> <li>Common tasks already built into the framework (get geo-location, call a   remote API, interact with a web-socket, handle a long running user defined   function).</li> </ul>"},{"location":"core/#application","title":"Application","text":"<p>Contains all the above.</p> <ul> <li>An application addresses / works within a specific domain.</li> <li>Has a name, icon and optional splash screen (displayed when starting up).</li> <li>Delivered via the web, or as a cross-platform package via BeeWare's   Briefcase project.</li> </ul>"},{"location":"core/functions/","title":"Functions","text":""},{"location":"core/functions/#outline","title":"Outline \ud83d\udcad","text":"<p>Functions contain code to implement custom behaviour when something happens (represented by a message). They define the unique aspects and behaviours of how the application interacts within the world.</p> <p>Functions are:</p> <ul> <li>Just Python functions with a single message argument.</li> <li>Store and change the state of things via the datastore.</li> <li>Signal events and activity by publishing messages.</li> </ul>"},{"location":"core/functions/#example-use","title":"Example use \ud83e\udd16","text":"<pre><code>import invent\n\n\ndef my_handler_function(msg):\n    \"\"\"\n    A function to handle messages. It does two things:\n\n    1. Store a value from the message in the app's datastore.\n    2. Publishes a new message to the \"log_my_message\" channel.\n    \"\"\"\n    invent.datastore[\"answer_to_life\"] = msg[\"meaning_of_life\"]\n    invent.publish(\"log_my_message\", msg)\n\n# Subscribe the function to the \"test_channel\".\ninvent.subscribe(channel=\"test_channel\", my_handler_function)\n\n# When this message is published, the function will run.\ninvent.publish(channel=\"test_channel\", message={\n    \"meaning_of_life\": 42,\n})\n</code></pre>"},{"location":"core/functions/#teaching-points","title":"Teaching points \ud83d\udde3\ufe0f","text":"<p>Learning / understanding outcomes:</p> <ul> <li>Functions receive arguments (sometimes called parameters) - data needed for   the function to work. In our case, there is a single argument representing   the message that caused the function to run.</li> <li>The code written inside such functions describes the behaviour needed to   react to the message that caused it to run. Such code has access to the   message itself, the application's global datastore and an API cook-book of   built in utilities to achieve common and useful ends.</li> <li>The function can modify things in two ways: by storing or updating data in   the application's global datastore, or by publishing a message to indicate   some valuable thing has happened.</li> </ul> <p>There are literally thousands of tutorials online describing Python functions. Remember, functions that handle messages in this framework take a single argument and can only change things in two ways (by creating, updating or retrieving values from the datastore, or by publishing further messages). These limitations are imposed for the sake of simplicity, ease of understandability and teachability.</p> <p>Functions are named blocks of code, so the name you give to a function is important because it conveys something meaningful about what it does. Furthermore, you should add documentation to your function so folks can read, in plain English, about the its purpose and behaviour (see the example use section, above).</p> <p>Functions represent a specific set of instructions to achieve something, and can be themselves made up of further calls to other functions. Such instructions are called algorithms and a common metaphor is to compare them to recipes for preparing dishes of food.</p> <p>To continue the metaphor, if a function is like a recipe for a dish on the menu of a restaurant, then when a customer orders that specific dish from the menu, a message (in the form of an order) arrives in the kitchen from the waiter. The chef follows the instructions in the recipe to create the dish in response to the order. When the dish is ready, the food is stored on a dispatch table from where a waiter will take it to the customer, and the chef rings a bell to send a message to the waiters that there is food waiting to be delivered to the customer.</p>"},{"location":"core/functions/#unplugged-activity","title":"Unplugged activity \ud83d\udd0c","text":"<p>This unplugged activity highlights how functions react to messages.</p> <p>You're going to call the register with your class of learners.</p> <p>Each learner has to follow the same function:</p> <ul> <li>Identify the name in the message.</li> <li>If the name is yours, create a new message by saying \"Here!\"</li> </ul> <p>Explain that you, the teacher, represent the \"application\" and that you send messages by speaking out loud to the classroom. Each message is simply a name.</p> <p>The algorithm you're using is:</p> <ul> <li>For each learner in the class...</li> <li>Send a message containing the learner's name.</li> <li>If you immediately get a \"Here!\" response, mark the learner as present in     the register.</li> </ul> <p>You may also elaborate that your function was run because you received a \"take the register\" message from the school administrator, and the message contained the register of learners used to store store the attendance. In this way many different functions are coordinated together via a series of messages to which specific functions react.</p>"},{"location":"core/media/","title":"Media","text":""},{"location":"core/media/#outline","title":"Outline \ud83d\udcad","text":"<p>When we talk about \"media\" we mean the digital assets used within the app. They may include (but are not limited to):</p> <ul> <li>Images (e.g. JPEG, PNG and GIF files).</li> <li>Sounds (e.g. MP3, WAV and other audio formats).</li> <li>Videos (e.g. MPEG4, MOV and WEBM files).</li> <li>Text (e.g. TXT files, or stored in structured data like CSV).</li> <li>Data (JSON, CSV, TOML, XML and other structured data formats).</li> </ul> <p>Media assets need related \"widgets\" that understand how to work with them and make them available to the user. For example, if you have a video asset, you'll need a video player widget in the user interface to display it to the user.</p> <p>Media assets are stored in a <code>media</code> directory. In the <code>media</code> directory are further sub-directories for each type of media: <code>images</code>, <code>sounds</code>, <code>videos</code>, <code>text</code> and <code>data</code>.</p> <p>The framework understands how to refer to your media assets so you can use them in your code.</p> <p>For example, if you had a <code>kitten.jpg</code> file in the <code>images</code> sub directory of the <code>media</code> directory, then you could refer to it in your code as:</p> <pre><code>my_kitten_pic = invent.media.images.kitten.jpg\n</code></pre> <p>The resulting <code>my_kitten_pic</code> object is a representation of the image as a <code>MediaSource</code> (a <code>MediaSource</code> understands such things as the sort of media to which it refers, and where to find the media).</p>"},{"location":"core/media/#example-use","title":"Example use \ud83e\udd16","text":"<p>A video widget with the id <code>my_video_widget</code> set to play a video called <code>my_video.webm</code>:</p> <pre><code>\"\"\"\nAssuming my_video.webm is in the project's \"videos\" media directory.\n\"\"\"\nimport invent\n\n\ndef play_video(msg):\n    # Find the video widget by its id.\n    player = invent.widgets.find(\"#my_video_widget\")\n    # Set the video source of the widget to \"my_video.webm\".\n    player.source = invent.media.videos.my_video.webm\n    # Get the widget to play the video.\n    player.play()\n</code></pre> <p>Audio can be played in the background if necessary.</p> <pre><code>\"\"\"\nAssuming a honk.mp3 file is in the project's \"sounds\" media directory.\n\"\"\"\nimport invent\n\n\ndef on_honk(msg):\n    \"\"\"\n    Called when the car-horn button is pressed.\n    \"\"\"\n    invent.play(invent.media.sounds.honk.mp3)\n</code></pre>"},{"location":"core/media/#teaching-points","title":"Teaching points \ud83d\udde3\ufe0f","text":"<p>Learning / understanding outcomes:</p> <ul> <li>Media are the raw digital assets used by the application.</li> <li>Examples of media include images, sounds, videos, text and raw data.</li> <li>Such media require related \"widgets\" in order to make them available to the   user.</li> <li>The media defines what something is, the widget brings the media into the   world of the user via the app.</li> </ul> <p>A useful way to think of the distinction between media and widgets is to consider the difference between a painting (the media - the paint and pigments of, say, the Mona Lisa) and the frame, art gallery or poster in which it is displayed (the widget). Similarly, there's the song \"Frere Jaques\" (the media - a series of notes and words) but it still needs to be performed in some way (the widget), by a choir or on the radio. Finally, a TV programme (the media) may be transmitted over the airwaves, but you still need a TV set to watch it (the widget).</p>"},{"location":"core/media/#unplugged-activity","title":"Unplugged activity \ud83d\udd0c","text":"<p>This unplugged activity helps identify ways in which different types of media are used by applications.</p> <p>Open several popular web pages or apps. Ask learners to identify different sorts of media and how they are used.</p> <p>Examples may include:</p> <ul> <li>An image of a logo. Click it and you return \"home\".</li> <li>An animated spinner to indicate something is taking time.</li> <li>Sounds or music played to indicate certain events or activities.</li> <li>Textual content (that may have alternative translations depending on the   human language selected).</li> <li>Informational data presented in some way (how is the story in the data   presented?).</li> </ul> <p>For each example ask them to identify three things:</p> <ul> <li>The type of media (image, sound, video, text, data etc...)</li> <li>Its purpose (informational, an alert, creating a mood etc...) and how the   media achieves this purpose.</li> <li>The context of the media (how this sits within the larger functionality of   the app).</li> </ul> <p>By looking at examples from different web pages or apps, can learners identify common patterns of media use (for example, the use of colour to indicate status: success, warning, error etc...)?</p> <p>Finally, ask learners to design their own media to use as part of an activity in an app of their choice. Examples may include:</p> <ul> <li>Icons to click that represent common activities in their app (for example,   what image could you click to show you like some content, how might you   visually display the review ratings for a product, etc...).</li> <li>Sound effects to play at certain events: success, warning, error.</li> <li>Textual instructions for a login page, shopping cart or profile creation   page.</li> <li>Images to place onto a map indicating the location of various types of   location (hospital, police station, sports arena, garage, cinema etc...)</li> <li>A collection of animations to indicate certain activities are waiting to   complete: logging in, paying for something, booking a cinema ticket,   calculating a route for a journey.</li> <li>Displaying quantitative information over time: temperature, rainfall or   sunshine over a year for a particular location, average journey time between   two locations depending on time of day, how busy a restaurant usually is at   certain times.</li> </ul>"},{"location":"core/pubsub/","title":"PubSub","text":""},{"location":"core/pubsub/#outline","title":"Outline \ud83d\udcad","text":"<p>Pub/sub stands for publish and subscribe. Pubsub is a way to listen for, and send messages to organise and coordinate what should happen when something occurs in your application.</p> <ul> <li>Messages are sent to a meaninfully named channel, and consist of an   arbitrary payload of data to give context.</li> <li>Publish (pub) messages to channels, to indicate when something happens.</li> <li>Subscribe (sub) to messages on a certain channel with a function, to   handle when certain things happen.</li> </ul>"},{"location":"core/pubsub/#example-use","title":"Example use \ud83e\udd16","text":"<pre><code>import invent\n\n\ndef test_handler_function(msg):\n    \"\"\"\n    To handle messages on the test_channel.\n    \"\"\"\n    invent.datastore[\"answer_to_life\"] = msg[\"meaning_of_life\"]\n\n# Subscribe the function to the \"test_channel\".\ninvent.subscribe(channel=\"test_channel\", handler=test_handler_function)\n\n# Publish a message to the \"test_channel\".\ninvent.publish(channel=\"test_channel\", message={\n    \"name\": \"Some arbitrary data\",\n    \"description\": \"The payload must be JSON serializable.\",\n    \"meaning_of_life\": 42,\n})\n\n# Things continue to happen...\n\n# Eventually, you may want to unsubscribe the function from the \"test_channel\".\ninvent.unsubscribe(channel=\"test_channel\", handler=test_handler_function)\n</code></pre>"},{"location":"core/pubsub/#teaching-points","title":"Teaching points \ud83d\udde3\ufe0f","text":"<p>Learning / understanding outcomes:</p> <ul> <li>Messages are published to a channel with a meaningful name.</li> <li>The message contains contextual data (that can be converted to JSON).</li> <li>Subscribe to a channel with a function to handle incoming messages on that   specific channel. When a message is sent to the channel, the function is   called with the message (see functions).</li> </ul> <p>Imagine that pubsub is like a sort of Whatsapp, but for code.</p> <p>In Whatsapp you join particular groups. Joining a group on Whatsapp is the same as subscribing to a channel in pubsub, and the result is similar too. Everyone who is a member of a Whatsapp group gets all the messages sent via that group. Similarly, every function subscribed to a channel is run each time a message is sent to the channel. If you want to say something to everyone in the Whatsapp group, you just send a message to the group. Similarly, if a piece of code requires all the functions subscribed to a certain channel to react when something important has happened, it publishes a message describing that important something to the channel. Just as in Whatsapp, it's possible to unsubscribe functions from a channel.</p> <p>That's really all there is to it!</p> <p>In the same way it's possible to coordinate a group of friends or an organisation by sending messages via WhatsApp groups, it's possible to coordinate and organise how an application works by having code publish messages, while other pieces of code (functions) react to them.</p>"},{"location":"core/pubsub/#unplugged-activity","title":"Unplugged activity \ud83d\udd0c","text":"<p>This unplugged activity highlights how messages are sent to channels, and functions are subscribed to channels.</p> <p>This is a variation of the \"Simon Says\" game.</p> <p>Within your class of learners, each participant is \"subscribed\" to a channel signifying the colour of an item of clothing they're wearing or an object they're carrying. For example, the colour of their top, or colour of their bag.</p> <p>At the start of the game, each player has the same \"function\" to follow when they receive a message:</p> <ul> <li>Follow the instructions in the message.</li> </ul> <p>As teacher, you'll send messages to different channels using this very specific recipe:</p> <ul> <li>You say the name of the desired colour / channel (e.g. \"red\", \"blue\",   \"green\").</li> <li>Then you say the message (e.g. \"stand on one leg\", \"touch your nose\", \"sit   down\").</li> </ul> <p>If a learner gets things wrong, they're \"out\", with last one standing the winner.</p> <p>Mix things up! Why not..?</p> <ul> <li>Use colours that don't reflect your learners.</li> <li>Don't follow the message sending recipe.</li> <li>Send a message that causes the folks in one channel to send a message to   another channel.</li> </ul> <p>For example, with the message, \"blue: send a message to red to stand on one leg\", the blue learners need to follow the message sending recipe correctly, and the red learners can't do anything until that message has been sent.</p> <p>Further refine the game by handing out custom \"functions\" to learners to follow should they get a message on their channel. Such functions should reflect the physical learning situation, such as:</p> <ul> <li>Only follow instructions in the message if the window is open.</li> <li>Resend any message you get to the \"blue\" channel.</li> <li>Write down the message, but don't follow it.</li> <li>Always follow the instructions in the message twice.</li> <li>Clap your hands, follow the instructions in the message, then stamp your   feet.</li> </ul> <p>Invent more \"functions\" of your own!</p>"},{"location":"core/widgets/","title":"Widgets","text":""},{"location":"core/widgets/#outline","title":"Outline \ud83d\udcad","text":"<p>Widgets are elements of a user interface.</p> <p>The user interface defines how people interact with an application, and how the application interacts with people.</p> <p>Common widgets used to make up a user interface include (but are not limited to):</p> <ul> <li>Activity indicators - an animation showing activity of indeterminate length,   usually some sort of \"spinner\".</li> <li>Audio players - play sound files. These may be visible to the user in the   form of playback buttons and a progress bar, or may be invisible if playing   ambient sounds.</li> <li>Buttons - something to press or click to cause some sort of action in the   application. Buttons may contain a text label (to indicate what it does) or   an image (an icon that represents what it does). They may also be disabled   (i.e. visible, but not functioning).</li> <li>Canvases - an area of the user interface in which one dynamically draws.   This is often used as a way to display graphs, charts and other interactive   graphical elements.</li> <li>Dividers - separators used to visually distinguish different sections of   content in the user interface. These usually take the form of lines of a   certain thickness and colour.</li> <li>Email inputs - for typing in valid email addresses. This is usually a text   input that only allows the entry of valid email addresses.</li> <li>Images - contain pictures to display as part of the user interface. Images   can be contained in other widgets, like buttons.</li> <li>Labels - short explanatory / contextual text for annotating other widgets   (such as the text of a button, or labels for input widgets).</li> <li>Maps - display tile based data. They centre on a location and may have   markers, routes or areas highlighted. Maps may also be draggable and   zoomable.</li> <li>Multi-line text inputs - for entering large amounts of text.</li> <li>Multiple choice selectors - for selecting any items from a list of options.   Options are toggled as selected / deselected with a press or a click. More   options may be available via the use of a scroll bar.</li> <li>Number inputs - for typing in numeric input. This is usually a text input   that only allows the entry of valid numeric values.</li> <li>Password inputs - for typing in passwords (without revealing the password on   the user interface). These are text inputs whose value is hidden by place   holders for the actual text (such as \"<code>*</code>\").</li> <li>Progress bars - for indicating the progress of a task of known length. As a   task progresses events are fired that cause the progress bar to grow.</li> <li>Scroll bars - for moving around content on the UI that is too big to display   in the available space. Scroll bars are usually at the edge of a scrollable   area and move both horizontally and vertically.</li> <li>Selectors - for choosing a single item from a list of options. Items are   selected / de-selected with a press or a click. If a different item is   already selected, it is automatically de-selected in favour of the newly   selected item.</li> <li>Sliders - for selecting a value within a range. The range is usually shown   as a horizontal or vertical line, with the selected value as a draggable   marker.</li> <li>Switches - an indicator with two possible states: True (on, checked);   and False (off, unchecked). They are toggled via a click or press.</li> <li>Tables - layed out with rows and columns, are used for displaying tabular   data.</li> <li>Text inputs - a single line box for typing in short amounts of text.</li> <li>Trees - for displaying data organised as hierarchical (tree like) items.   Trees may allow themselves to be expanded or contracted by toggling parent   items, to show or hide their child items.</li> <li>Video players - for rendering video files to the user interface. These will   usually include playback control buttons and a progress bar.</li> </ul> <p>Some of the widgets are presentational - they display or make available certain sorts of media or data. Other widgets are interactive - the user affects change in the application via gestures, clicks and other activities.</p> <p>Widgets subscribe to messages and automatically update their media and data when such messages are published.</p> <p>Widgets are organised into containers. Containers may contain other containers. As a result, widgets and containers will always have a parent container. A container's widgets and containers are called its children.</p> <p>Containers define the formation and layout to use to show their child widgets and containers to the user.</p> <p>Such arrangements, that stress how things appear in relation to each other, ensure the software is able to compute the precise layout of the user interface given different types of device (mobile, tablet or desktop) and orientations (portrait or landscape).</p> <p>There are several different types of container:</p> <ul> <li>Box - a generic container for widgets or containers.</li> <li>Tab box - a container of containers that allows the user to select which   child container is displayed depending on a tab control.</li> <li>Split box - a container of containers between which a moveable split is   shown so the user can change the relative sizes of the child containers.</li> <li>Scroll box - a container, with a specified height or width, that may contain   content larger than the available display size. Vertical and horizontal   scroll bars my be used to make visible different areas of the content in the   available display area.</li> </ul> <p>All containers are oriented in one of two ways:</p> <ul> <li>Vertical - that displays its children vertically one after the other.</li> <li>Horizontal - displays its children horizontally side by side of each other.</li> </ul> <p>All containers also have a direction associated with vertical or horizontal orientations.</p> <ul> <li>Vertical - starting either from the top to the bottom or other other way up,   from the bottom to the top. Default: top to bottom.</li> <li>Horizontal - starting from either the left to the right, or the other way   around, from the right to the left. Default: left to right.</li> </ul> <p>Containers are drawn onto cards. A card is an individual screen in an app.</p>"},{"location":"core/widgets/#example-use","title":"Example use \ud83e\udd16","text":"<p>The following code creates a form for entering a postal address, containing several containers and widgets. The textual description of the form can be updated via messages to the \"address_instructions\" channel, because the widget that represents the instructions subscribes to this channel.</p> <pre><code>import invent\nfrom invent.ui.widgets import Label, TextInput\nfrom invent.ui.containers import Box, VERTICAL, HORIZONTAL\n\n\n# Create a parent box to hold the rest of the form.\naddress_form = Box(VERTICAL)\n\n# Create some instructions to put at the top.\ninstructions = Label(\"Please fill in your address.\")\n# Because the instructions could change (e.g. if the address is invalid and the\n# user needs to know they should correct it), then subscribe the textual\n# content of the instructions to the \"address_instructions\" channel.\ninvent.subscribe(\"address_instructions\", instructions.text)\n\n# Each of the entries in the address is a label, a textual input and a\n# horizontal box to contain them.\nname_label = Label(\"Name:\")\nname_input = TextInput()\nname_container = Box(\n    HORIZONTAL, children=[name_label, name_input, ]\n)\n\nnumber_street_label = Label(\"House number / street:\")\nnumber_street_input = TextInput()\nnumber_street_container = Box(\n    HORIZONTAL, children=[number_street_label, number_street_input, ]\n)\n\ntown_label = Label(\"Town:\")\ntown_input = TextInput()\ntown_container = Box(\n    HORIZONTAL, children=[town_label, town_input, ]\n)\n\n\npostcode_label = Label(\"Postcode/Zip:\")\npostcode_input = TextInput()\npostcode_container = Box(\n    HORIZONTAL, children=[postcode_label, postcode_input, ]\n)\n\n# Add all the parts of the address form into the address container.\naddress_form.children = [\n    instructions,\n    name_container,\n    number_street_container,\n    town_container,\n    postcode_container,\n]\n</code></pre>"},{"location":"core/widgets/#teaching-points","title":"Teaching points \ud83d\udde3\ufe0f","text":"<p>Learning / understanding outcomes:</p> <ul> <li>Widgets are common UI elements like buttons, dropdowns, image viewers, video    players...</li> <li>Widget attributes may subscribe to messages so they auto-update.</li> <li>Containers contain widgets and other containers as their \"children\". They   define the widget's formation and layout.</li> </ul> <p>Widgets are to the user interface of an application, as knobs, switches and indicator lights are to, say, a kitchen appliance. They are a way to transmit information from the application to the user (by displaying media and data) or from the user to the application by manipulating or interacting with widgets.</p> <p>Since widgets are instantiated in some way (for example, they're drawn on the screen, or they're playing sounds), a great deal of thought and talent can be invested in how people and applications interact. This field of computing is called Human Computer Interaction (HCI) and encompasses design, psychology, learning, cultural studies, linguistics, security, sociological research and deeply technical work. Many disciplines outside the field of computing can be brought to bear through HCI. For instance, one of the foundational texts in HCI discusses how the user interfaces of applications are a form of theatre, and many musicians spend time composing fragmentary pieces, that often last less than a second, but which are used to indicate something has happend (such as an alert for a new email).</p> <p>Most importantly, when designing a user interface by assembling widgets and containers it is important to do so with empathy, compassion and collaborative communication... you need to know your user interface is engaging, fulfils its purpose and relates to the people you imagine will use it. That's why it's essential to place human beings, their culture and social interactions at the heart of such work.</p>"},{"location":"core/widgets/#unplugged-activities","title":"Unplugged activities \ud83d\udd0c","text":"<p>These two unplugged activities help secure the notion of \"widgets\" and model the way containers form and layout widgets in the user interface.</p>"},{"location":"core/widgets/#the-widget-cafe","title":"The widget cafe \u2615","text":"<p>Task - identify \"widgets\" in a real kitchen of a cafe.</p>"},{"location":"core/widgets/#team-formation","title":"Team formation \u26bd","text":"<p>Layout of your team on the pitch (like widgets).</p>"}]}